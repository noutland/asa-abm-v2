[["index.html", "ASA Agent-Based Model v2 Documentation A High-Performance Simulation Framework for Organizational Dynamics Welcome 0.1 Overview 0.2 Key Features 0.3 Documentation Structure 0.4 Quick Example 0.5 Support and Contributing 0.6 License", " ASA Agent-Based Model v2 Documentation A High-Performance Simulation Framework for Organizational Dynamics ASA ABM Development Team 2025-07-09 Welcome This documentation provides a comprehensive guide to the ASA Agent-Based Model v2, a high-performance simulation framework for studying Attraction-Selection-Attrition (ASA) dynamics in organizations. 0.1 Overview The ASA ABM v2 is designed to simulate how organizations evolve over time through the interplay of: Attraction: How individuals are drawn to organizations based on fit Selection: How organizations choose new members Attrition: How and why members leave organizations 0.2 Key Features High Performance: Built on data.table for efficient large-scale simulations Modular Architecture: Easy to extend and customize Comprehensive Metrics: Track organizational dynamics over time Flexible Parameters: Highly configurable simulation scenarios Future-Ready: Designed for network and hierarchical extensions 0.3 Documentation Structure This documentation is organized into the following sections: Getting Started: Installation and quick start guide Theoretical Background: Understanding the ASA framework Architecture Overview: System design and components User Guide: Running simulations and configuring parameters API Reference: Detailed function documentation Examples: Practical simulation scenarios Developer Guide: Extending the framework Appendices: Additional resources and references 0.4 Quick Example # Load the simulation engine source(&quot;simulation/engine.R&quot;) # Run a basic simulation results &lt;- run_asa_simulation( n_steps = 260, initial_size = 100, params = list(growth_rate = 0.02), verbose = TRUE ) # Analyze results summary(results$metrics) 0.5 Support and Contributing Issues: Report bugs or request features on our GitHub repository Contributing: We welcome contributions! See our contributing guide Contact: Reach out to the development team 0.6 License This project is licensed under the MIT License - see the LICENSE file for details. "],["getting-started.html", "Chapter 1 Getting Started 1.1 System Requirements 1.2 Installation 1.3 Quick Start Guide 1.4 File Structure 1.5 Next Steps 1.6 Troubleshooting", " Chapter 1 Getting Started This chapter will help you get up and running with the ASA ABM v2 simulation framework. 1.1 System Requirements 1.1.1 Software Requirements R version 4.0.0 or higher RStudio (recommended for development) Required R packages: data.table (&gt;= 1.14.0) checkmate (for input validation) ggplot2 (for visualization) knitr and rmarkdown (for documentation) 1.1.2 Hardware Recommendations RAM: Minimum 4GB, 8GB+ recommended for large simulations CPU: Multi-core processor for parallel processing capabilities Storage: 1GB free space for simulation outputs 1.2 Installation 1.2.1 Step 1: Clone or Download the Repository # Clone from GitHub (if available) git clone https://github.com/your-repo/asa-abm-v2.git # Or download and extract the ZIP file 1.2.2 Step 2: Install Required Packages # Install required packages install.packages(c(&quot;data.table&quot;, &quot;checkmate&quot;, &quot;ggplot2&quot;, &quot;knitr&quot;, &quot;rmarkdown&quot;, &quot;bookdown&quot;)) # For PDF documentation generation (optional) install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() 1.2.3 Step 3: Verify Installation # Set working directory to the project folder setwd(&quot;path/to/asa_abm_v2&quot;) # Source the simulation engine source(&quot;simulation/engine.R&quot;) # Run a test simulation test_results &lt;- run_asa_simulation(n_steps = 10, initial_size = 10) print(test_results$metrics) 1.3 Quick Start Guide 1.3.1 Basic Simulation Here’s the simplest way to run a simulation: # Load the simulation engine source(&quot;simulation/engine.R&quot;) # Run simulation with default parameters results &lt;- run_asa_simulation( n_steps = 260, # One year (weekly steps) initial_size = 100 # Starting organization size ) # View summary statistics summary(results$metrics) 1.3.2 Customized Simulation To run a simulation with custom parameters: # Define custom parameters my_params &lt;- list( growth_rate = 0.05, # 5% growth per hiring cycle hiring_frequency = 4, # Hire every 4 weeks selection_criteria = &quot;fit&quot;, # Select based on org fit turnover_threshold = -5 # Leave if satisfaction &lt; -5 ) # Run simulation results &lt;- run_asa_simulation( n_steps = 520, initial_size = 50, params = my_params, verbose = TRUE ) 1.3.3 Analyzing Results The simulation returns a list containing: # Access different components results$final_organization # Final state of all agents results$metrics # Time series of organizational metrics results$parameters # Parameters used in simulation # Basic analysis library(ggplot2) # Plot organization size over time ggplot(results$metrics, aes(x = time, y = size)) + geom_line() + labs(title = &quot;Organization Growth&quot;, x = &quot;Time Step&quot;, y = &quot;Number of Employees&quot;) 1.4 File Structure Understanding the project structure: asa_abm_v2/ ├── core/ # Core modules │ ├── organization.R # Organization functions │ ├── agent.R # Agent/applicant functions │ └── interactions.R # Interaction mechanisms ├── simulation/ # Simulation components │ ├── engine.R # Main simulation loop │ ├── hiring.R # Recruitment logic │ └── turnover.R # Attrition logic ├── analysis/ # Analysis tools ├── tests/ # Unit tests ├── docs/ # Documentation ├── data/ # Sample data and outputs └── run_simulation.R # Example script 1.5 Next Steps Now that you have the simulation running: Read Chapter 2 to understand the ASA framework Explore Chapter 4 for detailed parameter explanations Check Chapter 7 for common simulation scenarios See Chapter 6 for function documentation 1.6 Troubleshooting 1.6.1 Common Issues Issue: “could not find function” error # Solution: Ensure you&#39;ve sourced the engine source(&quot;simulation/engine.R&quot;) Issue: Package not found # Solution: Install missing packages install.packages(&quot;package_name&quot;) Issue: Memory errors with large simulations # Solution: Reduce simulation size or increase R memory limit memory.limit(size = 8000) # Windows # Or use: options(java.parameters = &quot;-Xmx8g&quot;) # 8GB 1.6.2 Getting Help Check the FAQ section Review the API Reference Submit issues on GitHub Contact the development team "],["theoretical-background.html", "Chapter 2 Theoretical Background 2.1 The ASA Framework 2.2 Agent Characteristics 2.3 Interaction Dynamics 2.4 Organizational Metrics 2.5 Temporal Dynamics 2.6 Emergent Phenomena 2.7 Model Assumptions 2.8 Extensions and Variations 2.9 References and Further Reading 2.10 Mathematical Notation Summary", " Chapter 2 Theoretical Background This chapter provides the theoretical foundation for the Attraction-Selection-Attrition (ASA) framework and its implementation in this agent-based model. 2.1 The ASA Framework The Attraction-Selection-Attrition (ASA) framework, developed by Benjamin Schneider (1987), explains how organizations naturally evolve toward homogeneity through three interrelated processes: 2.1.1 Attraction Individuals are differentially attracted to organizations based on perceived fit between their personal characteristics and organizational attributes. In our model: - Agents calculate attraction based on: - Identity similarity (homophily preference) - Organizational diversity (diversity preference) - Personality alignment 2.1.2 Selection Organizations preferentially select individuals who fit their criteria and culture. In our model: - Selection can be based on: - Conscientiousness scores - Overall fit metrics - Random selection (baseline) 2.1.3 Attrition Individuals who don’t fit well with the organization are more likely to leave. In our model: - Turnover occurs through: - Satisfaction thresholds - Probabilistic turnover based on satisfaction - Tenure effects 2.2 Agent Characteristics 2.2.1 Personality Traits (Big Five) Each agent possesses five personality dimensions based on the Five-Factor Model: Openness: Creativity, curiosity, and openness to new experiences Conscientiousness: Organization, dependability, and work ethic Extraversion: Sociability, assertiveness, and energy Agreeableness: Cooperation, trust, and helpfulness Emotional Stability: Calmness, resilience, and emotional control These traits are normally distributed (mean = 0, sd = 1) in the population. 2.2.2 Identity Categories Agents belong to discrete identity categories (default: A, B, C, D, E) representing: - Functional backgrounds - Professional identities - Cultural groups - Or any categorical distinction relevant to the simulation 2.2.3 Preferences Two key preferences drive agent behavior: Homophily Preference: Attraction to similar others Diversity Preference: Attraction to organizational variety 2.3 Interaction Dynamics 2.3.1 Interaction Valence Calculation When agents interact, the quality (valence) of the interaction is determined by: Valence = -|ΔExtraversion| + (Conscientiousnessfocal - Extraversionpartner) + Agreeablenessfocal + IdentityBonus + ε Where: - ΔExtraversion: Difference in extraversion (similarity is beneficial) - IdentityBonus: Homophily preference if same identity, diversity preference if different - ε: Random component scaled by emotional stability 2.3.2 Satisfaction Dynamics Agent satisfaction integrates multiple components: Satisfaction = BaseAttraction + InteractionHistory + IdentityFit + DiversityComponent + PersonalityStability 2.4 Organizational Metrics 2.4.1 Identity Diversity We use Shannon entropy to measure identity diversity: H = -Σ(pi × log(pi)) Where pi is the proportion of identity category i. 2.4.2 Organizational Personality The organization’s personality profile is characterized by: - Mean levels of each Big Five trait - Standard deviations indicating personality diversity 2.5 Temporal Dynamics The model operates in discrete time steps, typically representing: - Days, weeks, or months - Configurable based on research needs Key temporal processes: - Hiring cycles: Periodic recruitment and selection - Interaction accumulation: Building relationship history - Tenure effects: Time-dependent behaviors 2.6 Emergent Phenomena The ASA model produces several emergent patterns: Homogenization: Organizations become more similar over time Culture crystallization: Dominant characteristics become reinforced Fit spirals: Good fit → satisfaction → retention → stronger culture Diversity cycles: Tension between homophily and diversity preferences 2.7 Model Assumptions Key assumptions in our implementation: Perfect information: Applicants can assess organizational fit Stable preferences: Agent preferences don’t change Random interactions: Agents interact randomly (can be modified) Linear satisfaction: Components combine additively 2.8 Extensions and Variations The framework supports several extensions: Network structures: Replace random with network-based interactions Multiple organizations: Inter-organizational mobility Dynamic environments: Changing selection criteria Team structures: Nested organizational units 2.9 References and Further Reading Schneider, B. (1987). The people make the place. Personnel Psychology, 40(3), 437-453. Schneider, B., Goldstein, H. W., &amp; Smith, D. B. (1995). The ASA framework: An update. Personnel Psychology, 48(4), 747-773. Harrison, D. A., Price, K. H., &amp; Bell, M. P. (1998). Beyond relational demography: Time and the effects of surface-and deep-level diversity on work group cohesion. Academy of Management Journal, 41(1), 96-107. 2.10 Mathematical Notation Summary Symbol Description N Organization size I Identity categories π Personality traits vector σ Satisfaction score τ Turnover threshold t Time step H Diversity index "],["architecture.html", "Chapter 3 Architecture Overview 3.1 Design Principles 3.2 System Architecture 3.3 Core Modules 3.4 Simulation Modules 3.5 Data Flow 3.6 Performance Optimizations 3.7 Extension Points 3.8 Configuration Management 3.9 Error Handling 3.10 Testing Architecture 3.11 Future Architecture Enhancements", " Chapter 3 Architecture Overview This chapter describes the technical architecture of the ASA ABM v2 system, its design principles, and component interactions. 3.1 Design Principles 3.1.1 1. Performance First Built on data.table for maximum performance in R Vectorized operations wherever possible Efficient memory management 3.1.2 2. Modularity Clear separation of concerns Independent, testable components Easy to extend or replace modules 3.1.3 3. Scalability Handles organizations from 10 to 10,000+ agents Configurable detail levels Memory-conscious data structures 3.1.4 4. Extensibility Prepared for network structures Ready for hierarchical organizations Plugin architecture for new features 3.2 System Architecture ┌─────────────────────────────────────────────────────────┐ │ User Interface │ │ (R Scripts, Shiny Apps, etc.) │ └─────────────────────┬───────────────────────────────────┘ │ ┌─────────────────────▼───────────────────────────────────┐ │ Simulation Engine │ │ (simulation/engine.R) │ ├─────────────────────────────────────────────────────────┤ │ • Orchestrates simulation flow │ │ • Manages time steps │ │ • Collects metrics │ │ • Handles I/O │ └─────────┬───────────────────────────────┬───────────────┘ │ │ ┌─────────▼──────────┐ ┌────────▼───────────┐ │ Core Modules │ │ Simulation Modules │ ├────────────────────┤ ├────────────────────┤ │ • organization.R │ │ • hiring.R │ │ • agent.R │ │ • turnover.R │ │ • interactions.R │ │ • (future modules) │ └────────────────────┘ └────────────────────┘ 3.3 Core Modules 3.3.1 organization.R Manages the organization data structure and organizational-level operations. Key Functions: - create_organization(): Initialize organization with agents - calculate_identity_diversity(): Compute diversity metrics - get_organization_summary(): Extract summary statistics Data Structure: Organization &lt;- data.table( agent_id # Unique identifier identity_category # Categorical identity openness # Big Five traits... conscientiousness extraversion agreeableness emotional_stability diversity_preference # Preferences homophily_preference attraction # State variables satisfaction tenure hire_date # Metadata is_active ) 3.3.2 agent.R Handles individual agents and applicant pools. Key Functions: - create_applicant_pool(): Generate potential hires - calculate_applicant_attraction(): Compute org attraction - applicants_to_employees(): Convert hired applicants Applicant Structure: Applicant &lt;- data.table( agent_id identity_category [personality traits] [preferences] attraction application_time ) 3.3.3 interactions.R Manages agent interactions and satisfaction updates. Key Functions: - execute_interactions_vectorized(): Parallel interaction processing - update_satisfaction_vectorized(): Batch satisfaction updates - get_interaction_summary(): Interaction statistics Interaction Structure: Interactions &lt;- data.table( focal_agent partner_agent time_step valence ) 3.4 Simulation Modules 3.4.1 hiring.R Implements recruitment and selection processes. Key Functions: - execute_hiring(): Main hiring process - recruit_applicants(): Generate new applicants - calculate_fit_metrics(): Assess person-organization fit 3.4.2 turnover.R Manages attrition and retention. Key Functions: - execute_turnover(): Process departures - calculate_turnover_probability(): Probabilistic turnover - identify_flight_risks(): Flag at-risk employees 3.5 Data Flow 3.5.1 1. Initialization Phase create_organization() → Initial agents ↓ initialize_interactions() → Empty interaction table ↓ create_applicant_pool() → Initial applicant pool 3.5.2 2. Simulation Loop For each time step: ├─ update_tenure() ├─ execute_interactions_vectorized() ├─ update_satisfaction_vectorized() ├─ execute_turnover() ├─ [If hiring cycle]: │ ├─ recruit_applicants() │ ├─ calculate_applicant_attraction() │ └─ execute_hiring() └─ calculate_step_metrics() 3.5.3 3. Output Phase Collect results → Save metrics → Save snapshots → Generate reports 3.6 Performance Optimizations 3.6.1 Vectorization Strategy Instead of row-by-row operations: # Bad (slow) for(i in 1:nrow(org)) { org[i, satisfaction := calculate_satisfaction(org[i,])] } # Good (fast) org[, satisfaction := base_attraction + interaction_component + identity_fit] 3.6.2 Memory Management Use data.table reference semantics Selective snapshot storage Efficient key indexing 3.6.3 Parallel Processing Preparation Architecture supports future parallelization: - Independent agent calculations - Batch processing design - Minimal shared state 3.7 Extension Points 3.7.1 1. Network Integration # Future: interactions.R execute_network_interactions &lt;- function(org, network, ...) { # Use network structure instead of random pairing } 3.7.2 2. Hierarchical Organizations # Future: organization.R create_hierarchical_organization &lt;- function(n_agents, n_divisions, hierarchy_levels, ...) { # Create nested structure } 3.7.3 3. Custom Selection Strategies # In hiring.R selection_strategies &lt;- list( conscientiousness = function(x) order(-x$conscientiousness), fit = function(x) order(-x$overall_fit), diversity = function(x) custom_diversity_selection(x), # Add new strategies here ) 3.8 Configuration Management 3.8.1 Parameter Structure params &lt;- list( # Organization identity_categories = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), # Hiring growth_rate = 0.01, hiring_frequency = 12, selection_criteria = &quot;conscientiousness&quot;, # Interactions n_interactions_per_step = 5, interaction_window = 10, # Turnover turnover_type = &quot;threshold&quot;, turnover_threshold = -10, # ... additional parameters ) 3.8.2 Validation All inputs validated using checkmate: assert_count(n_agents, positive = TRUE) assert_character(identity_categories, min.len = 1) assert_number(growth_rate, lower = 0, upper = 1) 3.9 Error Handling 3.9.1 Defensive Programming # Example from hiring.R if (nrow(applicant_pool) == 0) { return(list(organization = org, applicant_pool = applicant_pool)) } 3.9.2 Logging Strategy if (verbose) { message(sprintf(&quot;Time %d: Hired %d new employees&quot;, current_time, n_hired)) } 3.10 Testing Architecture 3.10.1 Unit Test Structure tests/ ├── test_organization.R ├── test_agent.R ├── test_interactions.R ├── test_hiring.R └── test_turnover.R 3.10.2 Integration Tests # Test full simulation pipeline test_that(&quot;simulation runs without errors&quot;, { results &lt;- run_asa_simulation(n_steps = 10, initial_size = 10) expect_s3_class(results$metrics, &quot;data.table&quot;) expect_gt(nrow(results$metrics), 0) }) 3.11 Future Architecture Enhancements Event System: Publish-subscribe for simulation events Plugin Architecture: Dynamic module loading Distributed Simulation: Multi-machine support Real-time Visualization: Live simulation monitoring Database Backend: For very large simulations "],["user-guide.html", "Chapter 4 User Guide 4.1 Running Your First Simulation 4.2 Simulation Parameters 4.3 Common Simulation Scenarios 4.4 Analyzing Results 4.5 Saving and Loading Results 4.6 Batch Simulations 4.7 Performance Tips 4.8 Troubleshooting", " Chapter 4 User Guide This chapter provides detailed guidance on running simulations, configuring parameters, and interpreting results. 4.1 Running Your First Simulation 4.1.1 Basic Simulation The simplest way to run a simulation uses all default parameters: # Load the simulation engine source(&quot;simulation/engine.R&quot;) # Run with defaults results &lt;- run_asa_simulation() 4.1.2 Understanding the Output The simulation returns a list with four components: results$final_organization # Final state data.table results$metrics # Time series metrics results$parameters # Parameters used results$organization_snapshots # Periodic snapshots 4.2 Simulation Parameters 4.2.1 Overview of All Parameters Parameter Type Default Description identity_categories character vector c(“A”,“B”,“C”,“D”,“E”) Possible identity categories growth_rate numeric 0.01 Proportion to hire each cycle hiring_frequency integer 12 Steps between hiring cycles selection_criteria character “conscientiousness” How to select hires n_interactions_per_step integer 5 Interactions per agent per step interaction_window integer 10 Steps to consider for satisfaction turnover_threshold numeric -10 Satisfaction threshold for leaving turnover_type character “threshold” Type of turnover model base_turnover_rate numeric 0.05 Base probability of leaving n_new_applicants integer 50 New applicants per hiring cycle applicant_attraction_threshold numeric -0.5 Min attraction to stay in pool max_application_time integer 12 Steps before application expires 4.2.2 Detailed Parameter Guide 4.2.2.1 Identity Categories Controls the types of identities agents can have: # Default categories params &lt;- list(identity_categories = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;)) # Custom categories (e.g., departments) params &lt;- list(identity_categories = c(&quot;Engineering&quot;, &quot;Sales&quot;, &quot;Marketing&quot;, &quot;Operations&quot;)) 4.2.2.2 Growth and Hiring Configure organizational growth: params &lt;- list( growth_rate = 0.02, # 2% growth per cycle hiring_frequency = 4, # Hire every 4 steps n_new_applicants = 100, # Large applicant pool selection_criteria = &quot;fit&quot; # Select based on fit ) Selection criteria options: - \"conscientiousness\": Highest conscientiousness scores - \"fit\": Best person-organization fit - \"random\": Random selection (baseline) 4.2.2.3 Interaction Settings Control how agents interact: params &lt;- list( n_interactions_per_step = 10, # More interactions interaction_window = 20 # Longer memory ) 4.2.2.4 Turnover Configuration Two turnover models available: Threshold Model: params &lt;- list( turnover_type = &quot;threshold&quot;, turnover_threshold = -5 # Leave if satisfaction &lt; -5 ) Probabilistic Model: params &lt;- list( turnover_type = &quot;probabilistic&quot;, base_turnover_rate = 0.10 # 10% base turnover ) 4.3 Common Simulation Scenarios 4.3.1 Scenario 1: High-Growth Startup startup_params &lt;- list( growth_rate = 0.10, # 10% growth per month hiring_frequency = 4, # Weekly hiring selection_criteria = &quot;fit&quot;, # Culture fit important turnover_threshold = -3, # Low tolerance for dissatisfaction n_new_applicants = 200 # Large applicant pool ) results &lt;- run_asa_simulation( n_steps = 260, initial_size = 20, params = startup_params ) 4.3.2 Scenario 2: Stable Corporation corp_params &lt;- list( growth_rate = 0.005, # 0.5% growth per quarter hiring_frequency = 12, # Monthly hiring selection_criteria = &quot;conscientiousness&quot;, turnover_type = &quot;probabilistic&quot;, base_turnover_rate = 0.02 # 2% monthly turnover ) results &lt;- run_asa_simulation( n_steps = 520, initial_size = 500, params = corp_params ) 4.3.3 Scenario 3: Diversity-Focused Organization diversity_params &lt;- list( growth_rate = 0.02, selection_criteria = &quot;random&quot;, # Reduce selection bias n_interactions_per_step = 20, # Increase mixing interaction_window = 30 # Longer relationship building ) # Also modify agent preferences # (Requires custom initialization - see Developer Guide) 4.4 Analyzing Results 4.4.1 Time Series Analysis library(ggplot2) library(dplyr) # Calculate moving averages results$metrics %&gt;% mutate( ma_satisfaction = zoo::rollmean(avg_satisfaction, 10, fill = NA), ma_size = zoo::rollmean(size, 10, fill = NA) ) %&gt;% ggplot(aes(x = time)) + geom_line(aes(y = avg_satisfaction), alpha = 0.3) + geom_line(aes(y = ma_satisfaction), color = &quot;blue&quot;, size = 1) 4.4.2 Identity Dynamics # Extract identity proportions over time identity_props &lt;- results$organization_snapshots %&gt;% lapply(function(snapshot) { snapshot[is_active == TRUE, .N, by = identity_category] %&gt;% mutate(prop = N / sum(N), time = snapshot$time[1]) }) %&gt;% bind_rows() # Plot identity evolution ggplot(identity_props, aes(x = time, y = prop, color = identity_category)) + geom_line(size = 1) + labs(title = &quot;Identity Category Evolution&quot;, y = &quot;Proportion&quot;) 4.4.3 Turnover Analysis # Calculate turnover rates turnover_analysis &lt;- results$metrics %&gt;% mutate( period = floor(time / 12), # Monthly periods employees_start = lag(size, default = 100) ) %&gt;% group_by(period) %&gt;% summarise( turnover_count = sum(employees_start - size + lag(size - employees_start)), avg_size = mean(size), turnover_rate = turnover_count / avg_size ) 4.5 Saving and Loading Results 4.5.1 Saving Simulation Output # Save with automatic file naming save_simulation_results(results, &quot;my_simulation&quot;) # Creates: # - my_simulation_metrics.csv # - my_simulation_params.rds # - my_simulation_final_org.csv # - my_simulation_snapshots.rds (if requested) 4.5.2 Loading Previous Results # Load saved results metrics &lt;- fread(&quot;my_simulation_metrics.csv&quot;) params &lt;- readRDS(&quot;my_simulation_params.rds&quot;) final_org &lt;- fread(&quot;my_simulation_final_org.csv&quot;) # Recreate results object results &lt;- list( metrics = metrics, parameters = params, final_organization = final_org ) 4.6 Batch Simulations 4.6.1 Parameter Sweeps # Define parameter grid param_grid &lt;- expand.grid( growth_rate = c(0.01, 0.02, 0.05), turnover_threshold = c(-10, -5, -2), selection_criteria = c(&quot;conscientiousness&quot;, &quot;fit&quot;, &quot;random&quot;) ) # Run simulations all_results &lt;- list() for(i in 1:nrow(param_grid)) { params &lt;- as.list(param_grid[i,]) results &lt;- run_asa_simulation( n_steps = 260, initial_size = 100, params = params, verbose = FALSE ) all_results[[i]] &lt;- results$metrics %&gt;% mutate( growth_rate = params$growth_rate, turnover_threshold = params$turnover_threshold, selection_criteria = params$selection_criteria, run_id = i ) } # Combine results combined_results &lt;- bind_rows(all_results) 4.6.2 Replication Studies # Run multiple replications n_replications &lt;- 10 replications &lt;- list() for(rep in 1:n_replications) { set.seed(rep) # Different random seed results &lt;- run_asa_simulation( n_steps = 260, initial_size = 100, params = my_params ) replications[[rep]] &lt;- results$metrics %&gt;% mutate(replication = rep) } # Analyze variance across replications bind_rows(replications) %&gt;% group_by(time) %&gt;% summarise( mean_size = mean(size), sd_size = sd(size), mean_satisfaction = mean(avg_satisfaction), sd_satisfaction = sd(avg_satisfaction) ) 4.7 Performance Tips 4.7.1 Memory Management # For large simulations, reduce snapshot frequency results &lt;- run_asa_simulation( n_steps = 1000, initial_size = 5000, params = list( snapshot_frequency = 50 # Only save every 50 steps ) ) # Clear memory between runs rm(results) gc() 4.7.2 Speed Optimization # Reduce interaction frequency for faster runs fast_params &lt;- list( n_interactions_per_step = 2, # Fewer interactions interaction_window = 5 # Shorter memory ) # Profile simulation performance library(profvis) profvis({ results &lt;- run_asa_simulation(n_steps = 100) }) 4.8 Troubleshooting 4.8.1 Common Issues No hiring occurring: - Check growth_rate &gt; 0 - Verify hiring_frequency aligns with n_steps - Ensure applicant pool is not empty Rapid organization collapse: - Increase turnover_threshold (less negative) - Reduce base_turnover_rate - Check satisfaction calculations Unrealistic homogenization: - Increase n_interactions_per_step - Use selection_criteria = \"random\" - Verify diversity preferences 4.8.2 Debugging Tools # Enable detailed logging debug_results &lt;- run_asa_simulation( n_steps = 20, initial_size = 10, verbose = TRUE, params = list(debug = TRUE) ) # Inspect specific time points time_10 &lt;- results$organization_snapshots[[1]] summary(time_10) "],["odd-protocol.html", "Chapter 5 ODD Protocol 5.1 1. Purpose and Patterns 5.2 2. Entities, State Variables, and Scales 5.3 3. Process Overview and Scheduling 5.4 4. Design Concepts 5.5 5. Initialization 5.6 6. Input Data 5.7 7. Submodels 5.8 References", " Chapter 5 ODD Protocol This chapter presents the ASA ABM v2 following the ODD (Overview, Design concepts, Details) protocol (Grimm et al., 2010, 2020). The ODD protocol provides a standardized way to describe agent-based models. 5.1 1. Purpose and Patterns 5.1.1 1.1 Purpose The purpose of this model is to simulate the Attraction-Selection-Attrition (ASA) processes in organizations to understand: Primary Questions: How do organizations evolve toward homogeneity through ASA processes? What role do individual preferences (homophily vs. diversity) play in organizational composition? How do different selection strategies affect long-term organizational diversity? What are the dynamics of satisfaction and turnover in evolving organizations? Secondary Questions: How does interaction frequency affect organizational culture formation? What is the relationship between personality diversity and organizational stability? How do hiring cycles and growth rates influence organizational evolution? 5.1.2 1.2 Patterns The model aims to reproduce and explain the following patterns observed in organizational research: Organizational Homogenization: Organizations tend to become more homogeneous over time Fit-Satisfaction-Retention Spiral: Better fitting employees are more satisfied and stay longer Diversity-Performance Relationship: Complex relationships between diversity and organizational outcomes Turnover Cascades: Departures can trigger additional turnover through social effects 5.2 2. Entities, State Variables, and Scales 5.2.1 2.1 Entities The model contains three types of entities: Agents (Employees and Applicants) Represent individuals who work in or apply to the organization Possess personality traits, identity, and preferences Can transition from applicant to employee Organization Collection of agents marked as active employees Emergent properties calculated from constituent agents Interactions Pairwise encounters between agents Store history of social experiences 5.2.2 2.2 State Variables 5.2.2.1 Agent-level State Variables Variable Type Range/Values Description agent_id character Unique string Unique identifier identity_category character “A”-“E” (default) Categorical identity openness numeric ~N(0,1) Big Five personality trait conscientiousness numeric ~N(0,1) Big Five personality trait extraversion numeric ~N(0,1) Big Five personality trait agreeableness numeric ~N(0,1) Big Five personality trait emotional_stability numeric ~N(0,1) Big Five personality trait homophily_preference numeric ~N(0,1) Preference for similarity diversity_preference numeric ~N(0,1) Preference for diversity attraction numeric Real Attraction to organization satisfaction numeric Real Current satisfaction level tenure integer 0+ Time steps in organization hire_date integer 0+ Time step when hired is_active logical TRUE/FALSE Currently employed application_time integer 0+ Time as applicant (applicants only) 5.2.2.2 Organization-level Variables (Emergent) Variable Type Description size integer Number of active agents identity_diversity numeric Shannon entropy of identities avg_satisfaction numeric Mean satisfaction of active agents personality_means numeric vector Mean of each Big Five trait personality_sds numeric vector SD of each Big Five trait 5.2.2.3 Global Variables Variable Type Description time integer Current simulation step parameters list Simulation parameters 5.2.3 2.3 Scales Temporal Scale: One time step typically represents one week Simulations typically run for 260-520 steps (1-2 years) Hiring cycles occur every 4-12 steps Organizational Scale: Organizations range from 10 to 10,000+ agents Typical simulations use 100-1,000 agents 5.3 3. Process Overview and Scheduling 5.3.1 3.1 Process Overview Each time step consists of the following processes in order: Update Tenure: Increment tenure for all active agents Execute Interactions: Agents interact with randomly selected partners Update Satisfaction: Calculate new satisfaction based on interactions Execute Turnover: Remove agents below satisfaction threshold Hiring Cycle (periodic): Age applicant pool Recruit new applicants Calculate applicant attraction Filter applicant pool Select and hire new employees Calculate Metrics: Record organizational state 5.3.2 3.2 Scheduling Sequential Processing: Processes execute in the order listed above Synchronous Updates: All agents update simultaneously within each process Discrete Time: All events occur at discrete time steps Conditional Execution: Hiring only occurs at specified intervals 5.4 4. Design Concepts 5.4.1 4.1 Basic Principles The model implements the ASA framework through: - Attraction: Differential attraction based on fit - Selection: Preferential hiring of fitting individuals - Attrition: Satisfaction-based turnover 5.4.2 4.2 Emergence The following properties emerge from individual-level behaviors: - Organizational culture (personality profile) - Identity composition and diversity - Turnover patterns and rates - Social network properties (implicit in interactions) 5.4.3 4.3 Adaptation Agents adapt through: - Satisfaction updates based on experiences - Turnover decisions based on satisfaction - No learning or trait changes (fixed personalities) 5.4.4 4.4 Objectives Agents seek to: - Applicants: Join organizations with high attraction - Employees: Maintain satisfaction above threshold - Organization: Hire best-fitting applicants (implicit) 5.4.5 4.5 Learning No explicit learning in current model. Agents have fixed traits and preferences. 5.4.6 4.6 Prediction Agents implicitly predict: - Applicants assess organizational fit before joining - Employees evaluate satisfaction trends (through threshold mechanism) 5.4.7 4.7 Sensing Agents can sense: - Organizational identity composition (for attraction calculation) - Interaction partner characteristics (during interactions) - Own satisfaction level 5.4.8 4.8 Interaction Direct: Pairwise interactions between agents Indirect: Through organizational composition effects Interaction Selection: Random pairing (extensible to networks) 5.4.9 4.9 Stochasticity Stochastic elements include: - Agent trait initialization (~N(0,1)) - Identity assignment (uniform random) - Interaction partner selection (random) - Interaction valence noise (scaled by emotional stability) - Hiring decisions (when using random selection) 5.4.10 4.10 Collectives The organization represents a collective with emergent properties calculated from member characteristics. 5.4.11 4.11 Observation The model collects: - Time series of organizational metrics - Final organization state - Periodic snapshots (configurable) - Interaction histories 5.5 5. Initialization 5.5.1 5.1 Initial Conditions Default initialization: # Create initial organization initial_size = 100 identity_categories = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;) # Agents initialized with: - Random identities (uniform distribution) - Personality traits ~ N(0,1) - Preferences ~ N(0,1) - Attraction = 0 - Satisfaction = 0 - Tenure = 0 - All marked as active 5.5.2 5.2 Input Data The model can accept: - Custom identity category definitions - Specified initial organization size - Parameter configurations - Random seed for reproducibility 5.6 6. Input Data No external data files required. All agent characteristics generated stochastically during initialization. 5.7 7. Submodels 5.7.1 7.1 Attraction Calculation For Applicants: Attraction = (HomophilyPref × PropSameIdentity) + (DiversityPref × DiversityIndex) 5.7.2 7.2 Interaction Valence When agents i and j interact: Valence_ij = -|Extraversion_i - Extraversion_j| + (Conscientiousness_i - Extraversion_j) + Agreeableness_i + IdentityBonus + ε Where: - IdentityBonus = HomophilyPref_i if same identity, DiversityPref_i if different - ε ~ N(0, |EmotionalStability_i|) 5.7.3 7.3 Satisfaction Update Satisfaction_i = Attraction_i + mean(RecentInteractionValences) + (HomophilyPref_i × PropSameIdentity) + (DiversityPref_i × DiversityIndex) + EmotionalStability_i 5.7.4 7.4 Turnover Decision Threshold Model: if (Satisfaction &lt; TurnoverThreshold) then Leave Probabilistic Model: P(Leave) = BaseTurnoverRate / (1 + exp(Satisfaction × Weight)) 5.7.5 7.5 Hiring Process Rank applicants by criterion (conscientiousness/fit/random) Select top N where N = CurrentSize × GrowthRate Convert selected applicants to employees Add to organization 5.7.6 7.6 Identity Diversity Shannon Entropy: H = -Σ(p_i × log(p_i)) Where p_i is the proportion of identity category i. 5.8 References Grimm, V., Berger, U., Bastiansen, F., Eliassen, S., Ginot, V., Giske, J., … &amp; DeAngelis, D. L. (2006). A standard protocol for describing individual-based and agent-based models. Ecological Modelling, 198(1-2), 115-126. Grimm, V., Berger, U., DeAngelis, D. L., Polhill, J. G., Giske, J., &amp; Railsback, S. F. (2010). The ODD protocol: A review and first update. Ecological Modelling, 221(23), 2760-2768. Grimm, V., Railsback, S. F., Vincenot, C. E., Berger, U., Gallagher, C., DeAngelis, D. L., … &amp; Ayllón, D. (2020). The ODD protocol for describing agent-based and other simulation models: A second update to improve clarity, replication, and structural realism. Journal of Artificial Societies and Social Simulation, 23(2), 7. "],["api-reference.html", "Chapter 6 API Reference 6.1 Core Modules 6.2 Error Handling 6.3 Performance Notes", " Chapter 6 API Reference This chapter provides detailed documentation for all functions in the ASA ABM v2. Functions are organized by module with complete specifications. 6.1 Core Modules 6.1.1 core/organization.R Functions for creating and managing organizations. 6.1.1.1 create_organization() Create an organization data.table with agents. Usage create_organization(n_agents = 100, identity_categories = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;)) Arguments - n_agents: Number of agents to create (default: 100) - identity_categories: Vector of possible identity categories Value Returns a data.table with columns: - agent_id: Unique identifier - identity_category: Agent’s identity group - openness, conscientiousness, extraversion, agreeableness, emotional_stability: Big Five traits - homophily_preference, diversity_preference: Agent preferences - attraction, satisfaction: State variables - tenure, hire_date, is_active: Employment tracking Examples # Create default organization org &lt;- create_organization() # Create with custom identities org &lt;- create_organization( n_agents = 250, identity_categories = c(&quot;Tech&quot;, &quot;Sales&quot;, &quot;Ops&quot;) ) 6.1.1.2 calculate_identity_diversity() Calculate Shannon entropy for identity diversity. Usage calculate_identity_diversity(org) Arguments - org: Organization data.table Value Returns numeric Shannon entropy value (0 = homogeneous, higher = more diverse) 6.1.1.3 calculate_blau_index() Calculate Blau’s Index of heterogeneity for identity categories (I-O psychology standard). Usage calculate_blau_index(org) Arguments - org: Organization data.table Value Returns numeric Blau’s Index (0 = homogeneous, 1 = maximum diversity). Represents the probability that two randomly selected members are from different categories. 6.1.1.4 get_category_proportions() Get proportions of each identity category. Usage get_category_proportions(org) Arguments - org: Organization data.table Value Returns named vector with proportions for each category (A-E) Usage calculate_identity_diversity(org) Arguments - org: Organization data.table Value Numeric Shannon entropy value (0 = homogeneous, higher = more diverse) Examples diversity &lt;- calculate_identity_diversity(org) print(paste(&quot;Diversity index:&quot;, round(diversity, 3))) 6.1.1.5 calculate_personality_averages() Get mean personality traits for active employees. Usage calculate_personality_averages(org) Arguments - org: Organization data.table Value Numeric vector of trait means in order: openness, conscientiousness, extraversion, agreeableness, emotional_stability 6.1.1.6 calculate_personality_variance() Get standard deviations of personality traits. Usage calculate_personality_variance(org) Arguments - org: Organization data.table Value Numeric vector of trait SDs 6.1.1.7 get_organization_size() Count active employees. Usage get_organization_size(org) Arguments - org: Organization data.table Value Integer count of employees where is_active == TRUE 6.1.1.8 calculate_average_satisfaction() Compute mean satisfaction of active employees. Usage calculate_average_satisfaction(org) Arguments - org: Organization data.table Value Numeric mean satisfaction score 6.1.1.9 get_organization_summary() Generate comprehensive organizational metrics. Usage get_organization_summary(org) Arguments - org: Organization data.table Value List containing: - size: Active employee count - identity_diversity: Shannon entropy - avg_satisfaction: Mean satisfaction - avg_tenure: Mean tenure - personality_means: Vector of trait means - personality_sds: Vector of trait SDs - turnover_rate: Proportion inactive 6.1.2 core/agent.R Functions for managing applicant pools. 6.1.2.1 create_applicant_pool() Generate pool of potential applicants. Usage create_applicant_pool(n_applicants = 50, identity_categories = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;)) Arguments - n_applicants: Number of applicants to generate - identity_categories: Possible identity categories Value data.table with applicant information including unique IDs and application_time field Examples # Create standard pool applicants &lt;- create_applicant_pool() # Large pool with custom categories applicants &lt;- create_applicant_pool( n_applicants = 200, identity_categories = c(&quot;Eng&quot;, &quot;Prod&quot;, &quot;Sales&quot;) ) 6.1.2.2 calculate_applicant_attraction() Calculate attraction scores for applicants. Usage calculate_applicant_attraction(applicants, org, diversity_metric = &quot;blau&quot;) Arguments - applicants: Applicant pool data.table - org: Organization data.table - diversity_metric: Character string specifying which diversity metric to use (“blau” or “shannon”, default: “blau”) Value Updated applicants data.table with attraction scores based on identity fit and diversity Examples # Calculate attraction applicants &lt;- calculate_applicant_attraction(applicants, org, diversity_metric = &quot;blau&quot;) # View top attracted applicants top_applicants &lt;- applicants[order(-attraction)][1:10] 6.1.2.3 filter_applicant_pool() Remove applicants below attraction threshold. Usage filter_applicant_pool(applicants, min_attraction = -0.5) Arguments - applicants: Applicant pool data.table - min_attraction: Minimum attraction score to remain Value Filtered applicants data.table 6.1.2.4 age_applicant_pool() Increment application time and remove stale applications. Usage age_applicant_pool(applicants, max_application_time = 12) Arguments - applicants: Applicant pool data.table - max_application_time: Maximum time before removal Value Updated applicants with incremented time and stale applications removed 6.1.2.5 applicants_to_employees() Convert selected applicants to employee records. Usage applicants_to_employees(selected_applicants, hire_time = 0) Arguments - selected_applicants: Applicants to hire - hire_time: Current simulation time Value data.table of new employees with employee-specific fields added 6.1.3 core/interactions.R Functions for agent interactions and satisfaction. 6.1.3.1 initialize_interactions() Create empty interactions tracking table. Usage initialize_interactions(org) Arguments - org: Organization data.table Value Empty data.table with columns: focal_agent, partner_agent, time_step, valence 6.1.3.2 execute_interactions_vectorized() Perform one round of interactions using vectorized operations. Usage execute_interactions_vectorized(org, interactions, time_step, n_interactions = 1) Arguments - org: Organization data.table - interactions: Interaction history table - time_step: Current simulation time - n_interactions: Interactions per agent Value Updated interactions table with new interaction records Details Interaction valence calculated as: valence = -|ΔExtraversion| + (Consc_focal - Extra_partner) + Agree_focal + IdentityBonus + ε Where IdentityBonus depends on homophily/diversity preferences and identity match. 6.1.3.3 update_satisfaction_vectorized() Update all agent satisfaction scores efficiently. Usage update_satisfaction_vectorized(org, interactions, window_size = 10, diversity_metric = &quot;blau&quot;) Arguments - org: Organization data.table - interactions: Interaction history - window_size: Recent time steps to consider - diversity_metric: Character string specifying which diversity metric to use (“blau” or “shannon”, default: “blau”) Value Updated organization with new satisfaction scores 6.1.3.4 get_interaction_summary() Summarize recent interaction patterns. Usage get_interaction_summary(interactions, last_n_steps = 10) Arguments - interactions: Interaction history table - last_n_steps: Number of recent steps to analyze Value List with summary statistics: - total_interactions: Count - avg_valence: Mean interaction quality - sd_valence: Valence standard deviation - n_unique_pairs: Unique interaction pairs 6.1.4 simulation/hiring.R Functions for recruitment and selection. 6.1.4.1 execute_hiring() Main hiring process function. Usage execute_hiring(org, applicant_pool, growth_rate = 0.1, selection_criteria = &quot;conscientiousness&quot;, current_time = 0) Arguments - org: Organization data.table - applicant_pool: Available applicants - growth_rate: Proportion of current size to hire - selection_criteria: “conscientiousness”, “fit”, or “random” - current_time: Current simulation time Value List containing: - organization: Updated with new hires - applicant_pool: Remaining applicants Examples # Hire based on conscientiousness result &lt;- execute_hiring(org, applicants, growth_rate = 0.02) org &lt;- result$organization applicants &lt;- result$applicant_pool # Hire based on fit result &lt;- execute_hiring( org, applicants, selection_criteria = &quot;fit&quot; ) 6.1.4.2 recruit_applicants() Generate new applicants or add to existing pool. Usage recruit_applicants(existing_pool = NULL, n_new_applicants = 50, identity_categories = c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;)) Arguments - existing_pool: Current applicant pool (optional) - n_new_applicants: Number to generate - identity_categories: Possible identities Value Updated applicant pool data.table 6.1.4.3 calculate_fit_metrics() Calculate person-organization fit scores. Usage calculate_fit_metrics(org, applicants) Arguments - org: Organization data.table - applicants: Applicant pool Value Applicants with added fit metrics: - personality_fit: Based on trait distance - preference_fit: Based on preference alignment - overall_fit: Combined fit score 6.1.4.4 get_hiring_stats() Generate hiring statistics. Usage get_hiring_stats(org, time_window = 12) Arguments - org: Organization data.table - time_window: Recent period to analyze Value List of hiring metrics including recent hires, hiring rate, and demographics 6.1.5 simulation/turnover.R Functions for managing attrition. 6.1.5.1 execute_turnover() Remove employees below satisfaction threshold. Usage execute_turnover(org, turnover_threshold = -10, current_time = 0) Arguments - org: Organization data.table - turnover_threshold: Satisfaction threshold - current_time: Current simulation time Value Updated organization with low-satisfaction employees marked inactive 6.1.5.2 calculate_turnover_probability() Compute probabilistic turnover likelihood. Usage calculate_turnover_probability(org, base_turnover_rate = 0.05, satisfaction_weight = 0.1) Arguments - org: Organization data.table - base_turnover_rate: Baseline probability - satisfaction_weight: Impact of satisfaction Value Organization with added turnover_prob column 6.1.5.3 execute_probabilistic_turnover() Execute turnover based on probabilities. Usage execute_probabilistic_turnover(org, current_time = 0) Arguments - org: Organization with turnover probabilities - current_time: Current simulation time Value Updated organization after probabilistic departures 6.1.5.4 update_tenure() Increment tenure for active employees. Usage update_tenure(org, time_increment = 1) Arguments - org: Organization data.table - time_increment: Time units to add Value Organization with updated tenure values 6.1.5.5 get_turnover_stats() Calculate comprehensive turnover metrics. Usage get_turnover_stats(org, time_window = 12) Arguments - org: Organization data.table - time_window: Period to analyze Value List containing: - Turnover counts and rates - Average tenure comparisons - Satisfaction analysis - Identity-specific turnover 6.1.5.6 identify_flight_risks() Flag employees likely to leave. Usage identify_flight_risks(org, risk_threshold = 0.25) Arguments - org: Organization data.table - risk_threshold: Satisfaction percentile threshold Value data.table of at-risk employees sorted by satisfaction 6.1.6 simulation/engine.R Main simulation control functions. 6.1.6.1 run_asa_simulation() Execute complete ASA simulation. Usage run_asa_simulation(n_steps = 260, initial_size = 100, params = list(), verbose = TRUE) Arguments - n_steps: Number of time steps - initial_size: Starting organization size - params: Simulation parameters (see details) - verbose: Print progress messages Parameters List params = list( identity_categories = c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;), growth_rate = 0.01, hiring_frequency = 12, selection_criteria = &quot;conscientiousness&quot;, n_interactions_per_step = 5, interaction_window = 10, turnover_threshold = -10, turnover_type = &quot;threshold&quot;, base_turnover_rate = 0.05, n_new_applicants = 50, applicant_attraction_threshold = -0.5, max_application_time = 12, diversity_metric = &quot;blau&quot; # &quot;blau&quot; or &quot;shannon&quot; ) Value List containing: - final_organization: End state - metrics: Time series data.table - parameters: Used parameters - organization_snapshots: Periodic saves Examples # Basic simulation results &lt;- run_asa_simulation() # Custom parameters results &lt;- run_asa_simulation( n_steps = 520, initial_size = 200, params = list( growth_rate = 0.02, turnover_type = &quot;probabilistic&quot; ) ) 6.1.6.2 calculate_step_metrics() Compute metrics for single time step. Usage calculate_step_metrics(org, time_step) Arguments - org: Organization data.table - time_step: Current time Value data.table row with comprehensive metrics 6.1.6.3 save_simulation_results() Save simulation outputs to files. Usage save_simulation_results(results, filename = &quot;simulation_results&quot;, save_snapshots = FALSE) Arguments - results: Simulation results list - filename: Base filename - save_snapshots: Whether to save snapshots Details Creates files: - {filename}_metrics.csv - {filename}_params.rds - {filename}_final_org.csv - {filename}_snapshots.rds (optional) 6.2 Error Handling All functions validate inputs using checkmate: # Example validation assert_count(n_agents, positive = TRUE) assert_character(identity_categories, min.len = 1) assert_data_table(org) 6.3 Performance Notes Use vectorized functions for large organizations Snapshots are memory-intensive; save selectively Set verbose = FALSE for batch simulations Use data.table syntax for custom analyses "],["examples.html", "Chapter 7 Examples and Case Studies 7.1 Basic Examples 7.2 Advanced Examples 7.3 Case Studies 7.4 Best Practices from Examples 7.5 Code Snippets for Common Tasks", " Chapter 7 Examples and Case Studies This chapter provides practical examples and case studies demonstrating various uses of the ASA ABM v2. 7.1 Basic Examples 7.1.1 Example 1: Standard Simulation A basic simulation with default parameters: # Load the simulation engine source(&quot;simulation/engine.R&quot;) # Run a one-year simulation results &lt;- run_asa_simulation( n_steps = 52, # Weekly steps initial_size = 100, # Starting size verbose = TRUE ) # View final metrics final_metrics &lt;- tail(results$metrics, 1) print(final_metrics) # Plot organization size over time library(ggplot2) ggplot(results$metrics, aes(x = time, y = size)) + geom_line(color = &quot;darkblue&quot;, size = 1) + labs(title = &quot;Organization Size Over Time&quot;, x = &quot;Week&quot;, y = &quot;Number of Employees&quot;) + theme_minimal() 7.1.2 Example 2: High-Turnover Environment Simulating an organization with challenging conditions: # Configure high-turnover parameters high_turnover_params &lt;- list( turnover_threshold = -3, # Low satisfaction tolerance growth_rate = 0.05, # Aggressive hiring n_interactions_per_step = 2, # Limited interactions interaction_window = 5 # Short memory ) # Run simulation volatile_results &lt;- run_asa_simulation( n_steps = 260, initial_size = 50, params = high_turnover_params ) # Analyze turnover patterns library(dplyr) turnover_analysis &lt;- volatile_results$metrics %&gt;% mutate( period = ceiling(time / 13), # Quarterly size_change = size - lag(size, default = 50) ) %&gt;% group_by(period) %&gt;% summarise( avg_size = mean(size), total_turnover = sum(size_change[size_change &lt; 0]), turnover_rate = abs(total_turnover) / avg_size ) print(turnover_analysis) 7.1.3 Example 3: Diversity-Focused Hiring Testing different selection strategies: # Compare selection strategies strategies &lt;- c(&quot;conscientiousness&quot;, &quot;fit&quot;, &quot;random&quot;) strategy_results &lt;- list() for (strategy in strategies) { set.seed(123) # For comparability results &lt;- run_asa_simulation( n_steps = 156, # 3 years initial_size = 100, params = list( selection_criteria = strategy, growth_rate = 0.02 ), verbose = FALSE ) strategy_results[[strategy]] &lt;- results$metrics %&gt;% mutate(strategy = strategy) } # Combine and plot library(tidyr) combined_results &lt;- bind_rows(strategy_results) ggplot(combined_results, aes(x = time, y = identity_diversity, color = strategy)) + geom_line(size = 1) + labs(title = &quot;Identity Diversity by Selection Strategy&quot;, x = &quot;Time&quot;, y = &quot;Shannon Diversity Index&quot;) + theme_minimal() + scale_color_brewer(palette = &quot;Set1&quot;) 7.2 Advanced Examples 7.2.1 Example 4: Parameter Sensitivity Analysis Testing how different parameters affect outcomes: # Define parameter grid param_grid &lt;- expand.grid( growth_rate = c(0.01, 0.02, 0.05), turnover_threshold = c(-10, -5, -2), n_interactions = c(5, 10, 20) ) # Run simulations sensitivity_results &lt;- list() for (i in 1:nrow(param_grid)) { params &lt;- list( growth_rate = param_grid$growth_rate[i], turnover_threshold = param_grid$turnover_threshold[i], n_interactions_per_step = param_grid$n_interactions[i] ) results &lt;- run_asa_simulation( n_steps = 104, # 2 years initial_size = 100, params = params, verbose = FALSE ) # Extract key metrics final_state &lt;- tail(results$metrics, 1) sensitivity_results[[i]] &lt;- data.frame( param_grid[i,], final_size = final_state$size, final_satisfaction = final_state$avg_satisfaction, final_diversity = final_state$identity_diversity ) } # Analyze results sensitivity_df &lt;- bind_rows(sensitivity_results) # Create heatmap library(reshape2) size_matrix &lt;- dcast(sensitivity_df, growth_rate ~ turnover_threshold, value.var = &quot;final_size&quot;, fun.aggregate = mean) # Plot heatmap ggplot(melt(size_matrix), aes(x = factor(turnover_threshold), y = factor(growth_rate), fill = value)) + geom_tile() + geom_text(aes(label = round(value))) + scale_fill_gradient2(low = &quot;red&quot;, mid = &quot;white&quot;, high = &quot;green&quot;, midpoint = 100) + labs(title = &quot;Final Organization Size by Parameters&quot;, x = &quot;Turnover Threshold&quot;, y = &quot;Growth Rate&quot;) + theme_minimal() 7.2.2 Example 5: Intervention Analysis Testing organizational interventions: # Baseline simulation baseline &lt;- run_asa_simulation( n_steps = 104, initial_size = 100, params = list(tag = &quot;baseline&quot;), verbose = FALSE ) # Intervention: Improve interaction quality intervention &lt;- run_asa_simulation( n_steps = 104, initial_size = 100, params = list( n_interactions_per_step = 15, # Triple interactions interaction_window = 20, # Longer memory tag = &quot;intervention&quot; ), verbose = FALSE ) # Compare results comparison &lt;- bind_rows( baseline$metrics %&gt;% mutate(scenario = &quot;Baseline&quot;), intervention$metrics %&gt;% mutate(scenario = &quot;Intervention&quot;) ) # Plot satisfaction trajectories ggplot(comparison, aes(x = time, y = avg_satisfaction, color = scenario)) + geom_line(size = 1.2) + labs(title = &quot;Impact of Increased Interactions on Satisfaction&quot;, x = &quot;Time&quot;, y = &quot;Average Satisfaction&quot;) + theme_minimal() + scale_color_manual(values = c(&quot;Baseline&quot; = &quot;gray50&quot;, &quot;Intervention&quot; = &quot;darkgreen&quot;)) 7.3 Case Studies 7.3.1 Case Study 1: Startup Growth Dynamics Modeling a rapidly growing startup: # Startup parameters startup_params &lt;- list( # Aggressive growth growth_rate = 0.10, hiring_frequency = 2, n_new_applicants = 200, # Culture-focused selection selection_criteria = &quot;fit&quot;, # High interaction environment n_interactions_per_step = 20, interaction_window = 20, # Moderate turnover tolerance turnover_threshold = -5 ) # Run 2-year simulation startup_sim &lt;- run_asa_simulation( n_steps = 104, initial_size = 10, # Small founding team params = startup_params ) # Analyze growth phases growth_analysis &lt;- startup_sim$metrics %&gt;% mutate( phase = case_when( time &lt;= 26 ~ &quot;Founding&quot;, time &lt;= 52 ~ &quot;Early Growth&quot;, time &lt;= 78 ~ &quot;Scaling&quot;, TRUE ~ &quot;Maturing&quot; ) ) %&gt;% group_by(phase) %&gt;% summarise( start_size = first(size), end_size = last(size), growth_rate = (end_size - start_size) / start_size, avg_satisfaction = mean(avg_satisfaction), avg_diversity = mean(identity_diversity) ) print(growth_analysis) # Visualize growth trajectory ggplot(startup_sim$metrics, aes(x = time)) + geom_line(aes(y = size), color = &quot;blue&quot;, size = 1) + geom_line(aes(y = avg_satisfaction * 100), color = &quot;green&quot;, size = 1, linetype = &quot;dashed&quot;) + scale_y_continuous( name = &quot;Organization Size&quot;, sec.axis = sec_axis(~./100, name = &quot;Avg Satisfaction&quot;) ) + labs(title = &quot;Startup Growth and Satisfaction&quot;, x = &quot;Week&quot;) + theme_minimal() 7.3.2 Case Study 2: Merger Integration Simulating the integration of two organizational cultures: # Create two distinct organizations org_a &lt;- create_organization( n_agents = 80, identity_categories = c(&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;B&quot;) # A-dominant ) org_b &lt;- create_organization( n_agents = 60, identity_categories = c(&quot;C&quot;, &quot;C&quot;, &quot;D&quot;, &quot;D&quot;, &quot;E&quot;) # Different culture ) # Merge organizations merged_org &lt;- rbind(org_a, org_b) merged_org$agent_id &lt;- paste0(&quot;merged_&quot;, seq_len(nrow(merged_org))) # Run post-merger simulation merger_params &lt;- list( growth_rate = 0, # No hiring during integration n_interactions_per_step = 15, # Encourage mixing turnover_threshold = -8 # Some tolerance for dissatisfaction ) # Initialize properly source(&quot;simulation/engine.R&quot;) merger_sim &lt;- list( final_organization = merged_org, metrics = data.table(), parameters = merger_params ) # Track cultural integration integration_metrics &lt;- data.frame() for (month in 1:12) { # Run one month month_results &lt;- run_asa_simulation( n_steps = 4, initial_size = nrow(merged_org), params = merger_params, verbose = FALSE ) # Calculate integration index interactions &lt;- initialize_interactions(month_results$final_organization) # Store metrics integration_metrics &lt;- rbind( integration_metrics, data.frame( month = month, size = get_organization_size(month_results$final_organization), diversity = calculate_identity_diversity(month_results$final_organization), satisfaction = calculate_average_satisfaction(month_results$final_organization) ) ) # Update for next iteration merged_org &lt;- month_results$final_organization } # Plot integration progress ggplot(integration_metrics, aes(x = month)) + geom_line(aes(y = satisfaction), color = &quot;blue&quot;, size = 1) + geom_line(aes(y = diversity), color = &quot;green&quot;, size = 1) + geom_point(aes(y = satisfaction), color = &quot;blue&quot;) + geom_point(aes(y = diversity), color = &quot;green&quot;) + labs(title = &quot;Post-Merger Integration Metrics&quot;, x = &quot;Months Post-Merger&quot;, y = &quot;Metric Value&quot;) + theme_minimal() 7.3.3 Case Study 3: Remote Work Transition Modeling the impact of remote work on organizational dynamics: # Pre-remote baseline pre_remote &lt;- run_asa_simulation( n_steps = 52, initial_size = 200, params = list( n_interactions_per_step = 10, interaction_window = 10 ), verbose = FALSE ) # Remote work scenario (reduced interactions) remote_params &lt;- list( n_interactions_per_step = 3, # Fewer spontaneous interactions interaction_window = 15, # But longer-lasting connections turnover_threshold = -7, # Slightly more tolerance growth_rate = 0.005 # Slower growth ) remote_sim &lt;- run_asa_simulation( n_steps = 52, initial_size = 200, params = remote_params, verbose = FALSE ) # Hybrid scenario hybrid_params &lt;- list( n_interactions_per_step = 6, # Moderate interactions interaction_window = 12, turnover_threshold = -8, growth_rate = 0.015 ) hybrid_sim &lt;- run_asa_simulation( n_steps = 52, initial_size = 200, params = hybrid_params, verbose = FALSE ) # Compare scenarios scenarios &lt;- bind_rows( pre_remote$metrics %&gt;% mutate(scenario = &quot;Office&quot;), remote_sim$metrics %&gt;% mutate(scenario = &quot;Remote&quot;), hybrid_sim$metrics %&gt;% mutate(scenario = &quot;Hybrid&quot;) ) # Multi-panel comparison library(gridExtra) p1 &lt;- ggplot(scenarios, aes(x = time, y = avg_satisfaction, color = scenario)) + geom_line(size = 1) + labs(title = &quot;Satisfaction&quot;, y = &quot;Average&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;) p2 &lt;- ggplot(scenarios, aes(x = time, y = identity_diversity, color = scenario)) + geom_line(size = 1) + labs(title = &quot;Diversity&quot;, y = &quot;Shannon Index&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;) p3 &lt;- ggplot(scenarios, aes(x = time, y = size, color = scenario)) + geom_line(size = 1) + labs(title = &quot;Organization Size&quot;, y = &quot;Employees&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;) grid.arrange(p1, p2, p3, ncol = 3) 7.4 Best Practices from Examples 7.4.1 1. Parameter Selection Start with default values and adjust gradually Consider realistic ranges for your context Document parameter choices and rationale 7.4.2 2. Analysis Approach Always visualize time series data Compare multiple scenarios Calculate summary statistics for key periods Consider both individual and aggregate metrics 7.4.3 3. Validation Run multiple replications with different seeds Check for sensitivity to initial conditions Validate against known organizational patterns Test extreme parameter values 7.4.4 4. Interpretation Remember agent-based models show possibilities, not predictions Focus on patterns and dynamics rather than exact values Consider emergent behaviors not explicitly programmed Use results to generate hypotheses for further testing 7.5 Code Snippets for Common Tasks 7.5.1 Batch Processing # Run multiple replications run_replications &lt;- function(n_reps, params) { results &lt;- list() for (i in 1:n_reps) { set.seed(i) results[[i]] &lt;- run_asa_simulation(params = params) } return(results) } 7.5.2 Custom Metrics # Add custom metric calculation calculate_custom_metric &lt;- function(org) { # Example: Personality homogeneity personality_vars &lt;- c(&quot;openness&quot;, &quot;conscientiousness&quot;, &quot;extraversion&quot;, &quot;agreeableness&quot;, &quot;emotional_stability&quot;) homogeneity &lt;- org[is_active == TRUE, lapply(.SD, function(x) 1/sd(x)), .SDcols = personality_vars] return(mean(as.numeric(homogeneity))) } 7.5.3 Visualization Helpers # Create standard plot theme theme_asa &lt;- function() { theme_minimal() + theme( plot.title = element_text(face = &quot;bold&quot;), legend.position = &quot;bottom&quot;, panel.grid.minor = element_blank() ) } # Time series with confidence bands plot_with_ci &lt;- function(results_list, metric) { # Calculate mean and CI across replications combined &lt;- bind_rows(lapply(seq_along(results_list), function(i) { results_list[[i]]$metrics %&gt;% mutate(rep = i) })) summary_stats &lt;- combined %&gt;% group_by(time) %&gt;% summarise( mean_val = mean(get(metric)), lower_ci = quantile(get(metric), 0.025), upper_ci = quantile(get(metric), 0.975) ) ggplot(summary_stats, aes(x = time)) + geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.3) + geom_line(aes(y = mean_val), size = 1) + labs(y = metric) + theme_asa() } "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
